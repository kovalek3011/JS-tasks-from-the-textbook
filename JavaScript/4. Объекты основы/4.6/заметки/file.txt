// Опциональная цепочка '?.'

Проблема «несуществующего свойства»

let user = {}; // пользователь без свойства "address"

alert(user.address.street); // Ошибка!

--

// document.querySelector('.elem') равен null, если элемента нет
let html = document.querySelector('.elem').innerHTML; // ошибка, если он равен null

--

let user = {};

alert(user.address ? user.address.street : undefined);

--

let html = document.querySelector('.elem') ? document.querySelector('.elem').innerHTML : null;

--

let user = {}; // у пользователя нет адреса

alert(user.address ? user.address.street ? user.address.street.name : null : null);

--

let user = {}; // пользователь без адреса

alert( user.address && user.address.street && user.address.street.name ); // undefined (без ошибки)

--

Опциональная цепочка

Опциональная цепочка ?. останавливает вычисление и возвращает undefined, если значение перед ?. равно undefined или null.

Далее в этой статье, для краткости, мы будем говорить, что что-то «существует», если оно не является null и не undefined.

Другими словами, value?.prop:

работает как value.prop, если значение value существует,
в противном случае (когда value равно undefined/null) он возвращает undefined.
Вот безопасный способ получить доступ к user.address.street, используя ?.:

--

let user = {}; // пользователь без адреса

alert( user?.address?.street ); // undefined (без ошибки)

--

let html = document.querySelector('.elem')?.innerHTML; // будет undefined, если элемента нет

--

let user = null;

alert( user?.address ); // undefined
alert( user?.address.street ); // undefined

--

Сокращённое вычисление

let user = null;
let x = 0;

user?.sayHi(x++); // нет "user", поэтому выполнение не достигает вызова sayHi и x++

alert(x); // 0, значение не увеличилось

--

Другие варианты применения: ?.(), ?.[]

let userAdmin = {
  admin() {
    alert("Я админ");
  }
};

let userGuest = {};

userAdmin.admin?.(); // Я админ

userGuest.admin?.(); // ничего не произойдет (такого метода нет)

--

let key = "firstName";

let user1 = {
  firstName: "John"
};

let user2 = null;

alert( user1?.[key] ); // John
alert( user2?.[key] ); // undefined

--

delete user?.name; // удаляет user.name если пользователь существует

--

Итого

Синтаксис опциональной цепочки ?. имеет три формы:

obj?.prop – возвращает obj.prop если obj существует, в противном случае undefined.
obj?.[prop] – возвращает obj[prop] если obj существует, в противном случае undefined.
obj.method?.() – вызывает obj.method(), если obj.method существует, в противном случае возвращает undefined.